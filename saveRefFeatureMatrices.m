% ======================================================================
% This code written by R. Michael Winters
% Date created: February 16, 2016
%
%> @brief finds the most similar frames for a given query.
%> called by ::
%>
%> @param fs: The sampling rate of everything (assummed to be the same for
% query and reference
%>
%> @retval matches: Mvt1, Mvt2, Mvt3 structs containing structs of the
% different features
%>
% ======================================================================
function refStruct = saveRefFeatureMatrices(bigHopSize, bigWinSize, winSizesToSearch)

% Create a series of versions biased towards slower versions than the reference (32).
% winSizesToSearch = [16, 20, 24, 28, 32, 36];
% bigWinSize = 32;
% bigHopSize = 4;

% Declare the reference tracks
%refTracks = {'140517-049.mp3','140517-050.mp3','140517-051.mp3'};

% Tracks generated by the performer
refTracks = {'Mvt1.mp3','Mvt2.mp3','Mvt3.mp3'};

% Add these filenames to the structs as well.
refStruct.filenames = refTracks;

% Create a for loop for going through all tracks
for i=1:length(refTracks)
    trackName = refTracks{i};
    
    % For reference tracks, do not remove any "pauses" these should be
    % removed manually:
    removePauses = false;
    
    % Create the feature matrix
    eval(['refStruct.r' num2str(i) ' = createFeatureMatrix(trackName, bigHopSize, bigWinSize, removePauses);']);
    
    % Save local variables for referencing
    eval(['nZF = refStruct.r' num2str(i) '.nZF;']);
    eval(['pC = refStruct.r' num2str(i) '.pC;']);
    eval(['refStruct.r' num2str(i) '.winSizes = winSizesToSearch;']);
    
    % For each of the winSizes To search, create a unique pitchChroma
    for j=1:length(winSizesToSearch)
        
        % Initialize the referencePC with zeros
        rPC = zeros(12,length(nZF));
        
        % For each nZF, average the PC vectors of the windowSizeToSearch
        for k = 1:length(nZF)

            [startFrame, endFrame, numFrames] = computeStartEndFrame(nZF(k), bigHopSize, winSizesToSearch(j));
            
            % Ignore results outside of the allowable space.
            if endFrame <= size(pC, 2)
                rPCFrames = pC(:, startFrame : endFrame);
                rPC(:,k) = sum(rPCFrames, 2) / numFrames;
            else
                continue
            end        
        end
        
        % Now add this data to the struct
        eval(['refStruct.r' num2str(i) '.w' num2str(j) '.pC = rPC;']);
    end
end

save('refStructFeatMat', 'refStruct')
